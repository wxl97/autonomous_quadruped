// Generated by gencpp from file state_indicator_msgs/state_indicator.msg
// DO NOT EDIT!


#ifndef STATE_INDICATOR_MSGS_MESSAGE_STATE_INDICATOR_H
#define STATE_INDICATOR_MSGS_MESSAGE_STATE_INDICATOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace state_indicator_msgs
{
template <class ContainerAllocator>
struct state_indicator_
{
  typedef state_indicator_<ContainerAllocator> Type;

  state_indicator_()
    : state_msg(0)  {
    }
  state_indicator_(const ContainerAllocator& _alloc)
    : state_msg(0)  {
  (void)_alloc;
    }



   typedef int32_t _state_msg_type;
  _state_msg_type state_msg;





  typedef boost::shared_ptr< ::state_indicator_msgs::state_indicator_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::state_indicator_msgs::state_indicator_<ContainerAllocator> const> ConstPtr;

}; // struct state_indicator_

typedef ::state_indicator_msgs::state_indicator_<std::allocator<void> > state_indicator;

typedef boost::shared_ptr< ::state_indicator_msgs::state_indicator > state_indicatorPtr;
typedef boost::shared_ptr< ::state_indicator_msgs::state_indicator const> state_indicatorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::state_indicator_msgs::state_indicator_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::state_indicator_msgs::state_indicator_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::state_indicator_msgs::state_indicator_<ContainerAllocator1> & lhs, const ::state_indicator_msgs::state_indicator_<ContainerAllocator2> & rhs)
{
  return lhs.state_msg == rhs.state_msg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::state_indicator_msgs::state_indicator_<ContainerAllocator1> & lhs, const ::state_indicator_msgs::state_indicator_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace state_indicator_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::state_indicator_msgs::state_indicator_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::state_indicator_msgs::state_indicator_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::state_indicator_msgs::state_indicator_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::state_indicator_msgs::state_indicator_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::state_indicator_msgs::state_indicator_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::state_indicator_msgs::state_indicator_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::state_indicator_msgs::state_indicator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1374ed518637e22ec0ecc44aa5d4eda0";
  }

  static const char* value(const ::state_indicator_msgs::state_indicator_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1374ed518637e22eULL;
  static const uint64_t static_value2 = 0xc0ecc44aa5d4eda0ULL;
};

template<class ContainerAllocator>
struct DataType< ::state_indicator_msgs::state_indicator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "state_indicator_msgs/state_indicator";
  }

  static const char* value(const ::state_indicator_msgs::state_indicator_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::state_indicator_msgs::state_indicator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 state_msg\n"
;
  }

  static const char* value(const ::state_indicator_msgs::state_indicator_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::state_indicator_msgs::state_indicator_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state_msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct state_indicator_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::state_indicator_msgs::state_indicator_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::state_indicator_msgs::state_indicator_<ContainerAllocator>& v)
  {
    s << indent << "state_msg: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state_msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STATE_INDICATOR_MSGS_MESSAGE_STATE_INDICATOR_H
